<%= props.topLevelComment %>

import { default as fetch, Request } from 'node-fetch';

const ENV_VAR = process.env;
const GRAPHQL_API_KEY = ENV_VAR[Object.keys(ENV_VAR).find(key => key.endsWith('GRAPHQLAPIKEYOUTPUT'))];
const GRAPHQL_ENDPOINT = ENV_VAR[Object.keys(ENV_VAR).find(key => key.endsWith('GRAPHQLAPIENDPOINTOUTPUT'))];

const query = /* GraphQL */ `
  query LIST_TODOS {
    listTodos {
      items {
        id
        name
        description
      }
    }
  }
`;

/**
 * @type {import('@types/aws-lambda').APIGatewayProxyHandler}
 */

export const handler = async (event) => {
    console.log(`EVENT: ${JSON.stringify(event)}`);
  
    /** @type {import('node-fetch').RequestInit} */
    const options = {
      method: 'POST',
      headers: {
        'x-api-key': GRAPHQL_API_KEY
      },
      body: JSON.stringify({ query })
    };
  
    const request = new Request(GRAPHQL_ENDPOINT, options);
  
    let statusCode = 200;
    let body;
    let response;
  
    try {
      response = await fetch(request);
      body = await response.json();
      if (body.errors) statusCode = 400;
    } catch (error) {
      statusCode = 400;
      body = {
        errors: [
          {
            status: response.status,
            message: error.message,
            stack: error.stack
          }
        ]
      };
    }
  
    return {
      statusCode,
      <%- props.enableCors ? 
    `   headers: {
            \"Access-Control-Allow-Origin\": \"*\",
            \"Access-Control-Allow-Headers\": \"*\"
        },`
    :
    `//  Uncomment below to enable CORS requests
    //  headers: {
    //      "Access-Control-Allow-Origin": "*",
    //      "Access-Control-Allow-Headers": "*"
    //  },`
     %> 
      body: JSON.stringify(body)
    };
  };
