export async function runTransformer(context: any) {
  const transformerOutput = await context.amplify.executeProviderUtils(context, 'awscloudformation', 'compileSchema', {
    noConfig: true,
    forceCompile: true,
    dryRun: true,
    disableResolverOverrides: true,
    disableFunctionOverrides: true,
    disablePipelineFunctionOverrides: true,
  });
  const reqVTL = "#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )\n#set( $indexPath = \"/todo/_search\" )\n#set( $allowedAggFields = $util.defaultIfNull($ctx.stash.allowedAggFields, []) )\n#set( $aggFieldsFilterMap = $util.defaultIfNull($ctx.stash.aggFieldsFilterMap, {}) )\n#set( $nonKeywordFields = [] )\n#set( $keyFields = [\"id\"] )\n#set( $sortValues = [] )\n#set( $sortFields = [] )\n#set( $aggregateValues = {} )\n#set( $primaryKey = \"id\" )\n#if( !$util.isNullOrEmpty($args.sort) )\n  #foreach( $sortItem in $args.sort )\n    #if( $util.isNullOrEmpty($sortItem.field) )\n      $util.qr($sortFields.add($primaryKey))\n    #else\n      $util.qr($sortFields.add($sortItem.field))\n    #end\n    #if( $util.isNullOrEmpty($sortItem.field) )\n      #if( $nonKeywordFields.contains($primaryKey) )\n        #set( $sortField = $util.toJson($primaryKey) )\n      #else\n        #set( $sortField = $util.toJson(\"${primaryKey}.keyword\") )\n      #end\n    #else\n      #if( $nonKeywordFields.contains($sortItem.field) )\n        #set( $sortField = $util.toJson($sortItem.field) )\n      #else\n        #set( $sortField = $util.toJson(\"${sortItem.field}.keyword\") )\n      #end\n    #end\n    #if( $util.isNullOrEmpty($sortItem.direction) )\n      #set( $sortDirection = $util.toJson({\"order\": \"desc\"}) )\n    #else\n      #set( $sortDirection = $util.toJson({\"order\": $sortItem.direction}) )\n    #end\n    $util.qr($sortValues.add(\"{$sortField: $sortDirection}\"))\n  #end\n#end\n#foreach( $keyItem in $keyFields )\n  #if( !$sortFields.contains($keyItem) )\n    #if( $nonKeywordFields.contains($keyItem) )\n      #set( $sortField = $util.toJson($keyItem) )\n    #else\n      #set( $sortField = $util.toJson(\"${keyItem}.keyword\") )\n    #end\n    #set( $sortDirection = $util.toJson({\"order\": \"desc\"}) )\n    $util.qr($sortValues.add(\"{$sortField: $sortDirection}\"))\n  #end\n#end\n#foreach( $aggItem in $args.aggregates )\n  #if( $allowedAggFields.contains($aggItem.field) )\n    #set( $aggFilter = { \"match_all\": {} } )\n  #elseif( $aggFieldsFilterMap.containsKey($aggItem.field) )\n    #set( $aggFilter = { \"bool\": { \"should\": $aggFieldsFilterMap.get($aggItem.field) } } )\n  #else\n    $util.error(\"Unauthorized to run aggregation on field: ${aggItem.field}\", \"Unauthorized\")\n  #end\n  #if( $nonKeywordFields.contains($aggItem.field) )\n    $util.qr($aggregateValues.put(\"$aggItem.name\", { \"filter\": $aggFilter, \"aggs\": { \"${aggItem.name}\": { \"${aggItem.type}\": { \"field\": \"$aggItem.field\" }}} }))\n  #else\n    $util.qr($aggregateValues.put(\"$aggItem.name\", { \"filter\": $aggFilter, \"aggs\": { \"${aggItem.name}\": { \"${aggItem.type}\": { \"field\": \"${aggItem.field}.keyword\" }}} }))\n  #end\n#end\n#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )\n  #set( $filter = $ctx.stash.authFilter )\n  #if( !$util.isNullOrEmpty($args.filter) )\n    #set( $filter = {\n  \"bool\": {\n      \"must\":     [$ctx.stash.authFilter, $util.parseJson($util.transform.toElasticsearchQueryDSL($args.filter))]\n  }\n} )\n  #end\n#else\n  #if( !$util.isNullOrEmpty($args.filter) )\n    #set( $filter = $util.parseJson($util.transform.toElasticsearchQueryDSL($args.filter)) )\n  #end\n#end\n#if( $util.isNullOrEmpty($filter) )\n  #set( $filter = {\n  \"match_all\": {}\n} )\n#end\n{\n  \"version\": \"2018-05-29\",\n  \"operation\": \"GET\",\n  \"path\": \"$indexPath\",\n  \"params\": {\n      \"body\":     {\n                #if( $context.args.nextToken )\"search_after\": $util.base64Decode($args.nextToken), #end\n                #if( $context.args.from )\"from\": $args.from, #end\n                \"size\": #if( $args.limit ) $args.limit #else 100 #end,\n                \"sort\": $sortValues,\n                \"version\": true,\n                \"query\": $util.toJson($filter),\n                \"aggs\": $util.toJson($aggregateValues)\n                }\n  }\n}";
  transformerOutput.resolvers['Query.searchTodos.req.vtl'] = reqVTL;
  return { transformerOutput };
}
